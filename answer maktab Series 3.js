1)let deleteByIndex = (array, index) => array.filter((element, Index)=> Index - index)

///////////////////////////////////////////////////////////////////////////////////////////////////
2)const concatN = (...xs) =>
    xs.reduce((x,y) => x.concat(y), [])
console.log(concatN([1,2,3], [4,5,6], [9,8,7,0]))

///////////////////////////////////////////////////////////////////////////////////////////////////
3)const arr = [1, 2, [3, 4, [5, 6]]];


function flatDeep(arr, d = 1) {
    return d > 0 ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), [])
        : arr.slice();
};

flatDeep(arr, Infinity);
// [1, 2, 3, 4, 5, 6]
///////////////////////////////////////////////////////////////////////////////////////////////////
4)const num = [2, 3, 4];
const findByItem = (array, i) => {
    const finding = array.indexOf(i);
    console.log(finding);
};
findByItem(num, 3);

///////////////////////////////////////////////////////////////////////////////////////////////////
5)
function replaceByItem(array,currentItem,newItem) {
arraye.splice(array.indexOf(currentItem),1,newItam);
return array;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
6)var string = " have 2 apples and 3 pineapples"i;
var numbers = string.match(/\d+/g).map(Number);
///////////////////////////////////////////////////////////////////////////////////////////////////
7)removeDuplicate = (array) => [...new Set(array)]
///////////////////////////////////////////////////////////////////////////////////////////////////


